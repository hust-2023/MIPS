`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date: 2025/03/16 18:23:44
// Design Name: 
// Module Name: ctr
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////


module ctr(
    input [31:0] instr,
    output reg regDst,
    output reg aluSrc,
    output reg memToReg,
    output reg regWrite,
    output reg memRead,//????????????
    output reg memWrite,
    output reg jump,
    output reg branch,
    output reg [3:0]ALUop
    );
    wire [5:0] opCode;
    wire [5:0] funct;
    wire [11:0] ctr_varl;
    assign opCode = instr[31:26];
    assign funct = instr[5:0];
    assign ctr_varl = {opCode,funct};
    
    always @ (ctr_varl)
    begin
        casex(ctr_varl)
            12'b00000xxxxxx:             //R型
            begin
                case(funct)
                    6'b100000:       //add
                        ALUop = 4'b0001;
                    6'b100010:       //sub
                        ALUop = 4'b0010;
                    6'b100100:       //and
                        ALUop = 4'b0100;
                    6'b100101:       //or
                        ALUop = 4'b1000;
                    6'b101010:       //slt
                        ALUop = 4'b0101;
                    default :
                        ALUop = 4'b0000;
                 endcase
                regDst = 1;
                aluSrc = 0;
                memToReg = 0;
                regWrite = 1;
                branch = 0;
                jump = 0;
                memWrite = 0; 
                //memRead = 0;   
            end
            12'b100011xxxxxx:         // lw
            begin
                ALUop = 4'b0001;
                regDst = 0;
                aluSrc = 1;
                memToReg = 1;
                regWrite = 1;
                branch = 0;
                jump = 0;
                memWrite = 0;
                //memRead = 0;
            end
            12'b101011xxxxxx:         // sw
            begin
                ALUop = 4'b0001;
                regDst = 0; //无所谓 regWrite = 0; 决定写入寄存器
                aluSrc = 1;//1表示选立即数字符扩展，送入ALU
                memToReg = 1; //1--从存储器到寄存器 0--从ALU到寄存器
                regWrite = 0; 
                branch = 0;
                jump = 0;
                memWrite = 1; //允许写入存储器
                //memRead = 0;
            end
            12'b000100xxxxxx:        // beq
            begin
                ALUop = 4'b0010;     // ALU执行减法判断是否相等
                regDst = 0;          // 无关
                aluSrc = 0;          // 第二个操作数是寄存器
                memToReg = 0;        // 无关
                regWrite = 0;        // 不写寄存器
                memRead = 0;
                memWrite = 0;
                branch = 1;          // 启用分支
                jump = 0;
            end
            12'b000010xxxxxx:        // j
            begin
                ALUop = 4'b0000;     // 无需ALU操作
                regDst = 0;
                aluSrc = 0;
                memToReg = 0;
                regWrite = 0;
                memRead = 0;
                memWrite = 0;
                branch = 0;
                jump = 1;            // 启用跳转
            end
                        12'b001000xxxxxx:        // addi
            begin
                ALUop = 4'b0001;     // 加法
                regDst = 0;          // rt 寄存器写入
                aluSrc = 1;          // 使用立即数
                memToReg = 0;        // 来自 ALU
                regWrite = 1;        // 写入寄存器
                memRead = 0;
                memWrite = 0;
                branch = 0;
                jump = 0;
            end
            12'b001101xxxxxx:        // ori
            begin
                ALUop = 4'b1000;     // 逻辑或
                regDst = 0;          // rt 寄存器写入
                aluSrc = 1;          // 使用立即数
                memToReg = 0;        // 来自 ALU
                regWrite = 1;        // 写入寄存器
                memRead = 0;
                memWrite = 0;
                branch = 0;
                jump = 0;
            end
         endcase 
    end
    
endmodule
